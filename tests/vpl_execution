#! /bin/bash


# ---------- PROGRAMS TESTED (WITHOUT EXTENSION) ---------
compiled=true
prog1=app
prog2=libr
# --------------------- STARTING GRADE -------------------
grade=0


# --------------------- GLOBAL VARIABLES -------------------
declare -a RegexList1=(".*def\s\+main\s*(.*).*" ".*print\s*(.*).*" )
declare -a Comment1=("a main function" "a print call" )
declare -a RegexList2=(".*class\s\+Person.*" ".*def\s\+__init__\s*(.*).*" )
declare -a Comment2=("a Person class" "a constructor" )

# --------------------- SETTING VALUES FOR GRADES -------------------
numberOfRegex=${#RegexList1[*]}+${#RegexList2[*]}
compileGrade=30
regexGrade=40
numberOfTestCases=4
testCasesGrade=40
regex=regexGrade/numberOfRegex
testCase=testCasesGrade/numberOfTestCases

# ----------------- COMPILE STUDENT PROG  ----------------


#--- if error, assign a mi&imal grade ---
if (($? > 0)); then
     echo "------------------------"
     echo "Your program has compiler Errors. Please fix these Errors."
     cat grepLines.out
     echo "------------------------"
     compiled=false
fi

if grep -q '.*' ${prog1}.py
then
    if [ ${compiled} = true ] ; then
        grade=$((grade+compileGrade))
    fi
fi


# ----------- Remove single line comments from code -------------
sed -i 's|#.*||g' ${prog1}.py
sed -i 's|#.*||g' ${prog2}.py

# ----------- TEST THE CODE FOR PARTICULAR PATTERNS -------------

# ----------- TEST Code -------------
c=0
for reg in ${RegexList1[*]}; do
    if grep -q $reg ${prog1}.py
    then
        tempRegExGrade=$((tempRegExGrade+regex))
        grade=$((grade+regex))
    else
        echo "------------------------"
        echo "You have not ${Comment1[$c]} in" ${prog1}.py
    fi
    ((c++))
done

c=0
for reg in ${RegexList2[*]}; do
    if grep -q $reg ${prog2}.py
    then
        tempRegExGrade=$((tempRegExGrade+regex))
        grade=$((grade+regex))
    else
        echo "------------------------"
        echo "You have not ${Comment2[$c]} in" ${prog2}.py
    fi
    ((c++))
done


# --- create test input files ---
cat > data1.txt <<EOF
syed
EOF
cat > data2.txt <<EOF
mule
EOF
cat > data3.txt <<EOF
john
EOF
cat > data4.txt <<EOF
water
EOF


#--- create expected outputs, one for each input file above ---
cat > data1.out <<EOF
Name = syed.
EOF
cat > data2.out <<EOF
Name = mule.
EOF
cat > data3.out <<EOF
Name = john.
EOF
cat > data4.out <<EOF
Name = water.
EOF

count=0
if [ ${compiled} = true ] ; then
    #---loops through the amount of test cases you specified at the top ---
    for((i=1;i<=$numberOfTestCases;i++))
    do
       python3 app.py < data${i}.txt &> user.out

       #--- compute difference ---
       echo "---------------------"
       diff -y -w --ignore-all-space user.out data${i}.out > diff.out

       #--- reject if different ---
       if (($? > 0)); then
          # Wrong Answer
          echo "Test Case ${i} Failed"

          echo ""
          echo "Your answer:"
          cat user.out

          echo ""
          echo "Expected answer:"
          cat data${i}.out
       else
          # Answered Correctly
          echo ""
          echo "Test Case ${i} Passed"

          echo ""
          echo "Your answer:"
          cat user.out

          #---adds value to grade based on what % you wanted to give for testcases---
          grade=$((grade+testCase))
          ((count++))
       fi
    done
fi

if (( count == numberOfTestCases )); then
    echo "------------------------"
    echo "As you have passed all Test Cases, you have been given full marks"
fi

if (( grade > 100 )); then
    grade=100
fi

if (( grade < 1 )); then
    grade=0
fi

echo "------------------------"
echo ""
echo "Grade :=>> $grade"

